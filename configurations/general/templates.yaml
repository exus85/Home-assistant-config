################## TEMPLATE -> SENSORI ##############
- sensor: 
#  - name: qnas network down mbps
#    state: "{{ ((states('sensor.qnas_nas_download')) | float / 1000) | round (2)  }}"
#    unit_of_measurement: Mbit/s
#  - name: qnas network up mbps
#    state: "{{ ((states('sensor.qnas_nas_upload')) | float / 1000*-1) | round (2)  }}"
#    unit_of_measurement: Mbit/s
  - name: rete upload
    state: "{{(state_attr('sensor.unifi_gateway_www', 'tx_bytes-r')/125000) | round(2)}}"
    unit_of_measurement: Mbit/s
    unique_id: rete_upload
  - name: rete download
    state: "{{(state_attr('sensor.unifi_gateway_www', 'rx_bytes-r')/125000) | round(2)}}"
    unit_of_measurement: Mbit/s
    unique_id: rete_download   
  - name: unifi gateway www uptime
    state: > 
        {%- set time = state_attr('sensor.unifi_gateway_www','uptime') | int %}
        {%- set minutes = ((time % 3600) // 60) %}
        {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '' %}
        {%- set hours = ((time % 86400) // 3600) %}
        {%- set hours = '{}hr '.format(hours) if hours > 0 else '' %}
        {%- set days = (time // 86400) %}
        {%- set days = '{}d '.format(days) if days > 0 else '' %}
        {{ 'Less than 1 min' if time < 60 else days + hours + minutes }} 
    unique_id: unifi_gateway_www_uptime

#  - name: qnas uptime
#    state: >
#        {%- set time = states('sensor.qnas_nas_uptime') | int %}
#        {%- set minutes = ((time % 3600) // 60) %}
#        {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '' %}
#        {%- set hours = ((time % 86400) // 3600) %}
#        {%- set hours = '{}hr '.format(hours) if hours > 0 else '' %}
#        {%- set days = (time // 86400) %}
#        {%- set days = '{}d '.format(days) if days > 0 else '' %}
#        {{ 'Less than 1 min' if time < 60 else days + hours + minutes }} 
#    unique_id: qnas_uptime
    
  - name: hassio uptime templated
    state: >
      {% set up_time =  as_timestamp(now(),0) - as_timestamp(states('sensor.hassio_uptime'),0) | round(0) %}
              {% if up_time == 0 %}
                Just restarted...
              {% else %}
                {% set minutes = (up_time // 60) | int(0) %}
                {% set hours = (minutes // 60) %}
                {% set days = (hours // 24) %}
                {% set weeks = (days // 7) %}
                {% set minutes = (minutes % 60) %}
                {% set hours =  (hours % 24) %}
                {% set days = (days % 7) %}
                {% macro phrase(value, name) %}
                          {%- set value = value %}
                          {%- set end = '0' if value < 10 else '' %}
                          {{- '{}{}{}'.format(end, value, name) if value | int(0) > 0 else '' }}
                {%- endmacro %}
                {% set text = [ phrase(weeks, 'w'), phrase(days, 'd'), phrase(hours, 'h'), phrase(minutes, 'm') ] | select('!=','') | list | join(' ') %}
                {% set last_comma = text.rfind('') %}
                {% if last_comma != -1 %}
                  {% set text = text[:last_comma] + '' + text[last_comma + 1:] %}
                {% endif %}
              {{ text }}
              {% endif %} 
    unique_id: hassio_uptime_templated       

  
  - name: frase resoconto spotify
    state: >
            "{% if is_state('media_player.spotify_stefano_tonelli', 'playing') -%} Attualmente in riproduzione su <span class='dispositivo'> {{state_attr('media_player.spotify_stefano_tonelli', 'source')}} </span> - Brano: {{state_attr('media_player.spotify_stefano_tonelli', 'media_title')}} - Artista: {{state_attr('media_player.spotify_stefano_tonelli', 'media_artist')}} 
            {%- else -%}
            {%- endif %}"   
    picture: >
            "{% if is_state('media_player.spotify_stefano_tonelli', 'playing') -%} {{state_attr('media_player.spotify_stefano_tonelli', 'entity_picture')}}
            {%- else -%}
            {%- endif %}"   
    unique_id: frase_resoconto_spotify

  - name: infotext
    state: "Testo mancante" # VECCHIA FRASE "Oggi pi hole ha rilevato <span class='dispositivo'>{{states.sensor.pi_hole_dns_queries_today.state}}</span> queries, <span class='dispositivo'>{{states.sensor.pi_hole_ads_blocked_today.state}}</span> sono state bloccate pari al <span class='dispositivo'>{{states.sensor.pi_hole_ads_percentage_blocked_today.state}}%</span>"                  
    unique_id: infotext

  - name: month
    unique_id: month
    state: >
            {% set months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] %}
            {{ strptime(states('sensor.date'), '%Y-%m-%d').day }}
            {{ months[now().month-1] }}
            
  - name: date string
    unique_id: date_string
    state: "{{ states('sensor.day') }}, {{ states('sensor.month') }} {{ now().year }}"

###################### IRRIGAZIONE ###################
###################### IRRIGAZIONE ###################
###################### IRRIGAZIONE ###################




 


##########################################################################################################################################





################### AMBROGIO ########################
################### AMBROGIO ########################
################### AMBROGIO ########################
  - name: vacuum status
    unique_id: vacuum_status
    state: "{{ state_attr('vacuum.ambrogio','status') }}"

  - name: vacuum cleaning status
    unique_id: vacuum_cleaning_status
    state: "Cleaning {{ states('input_text.room_cleaning') }}"

  - name: vacuum battery
    unique_id: vacuum_battery
    state: "{{ state_attr('vacuum.ambrogio','battery_level') }}"
    unit_of_measurement: '%'
    device_class: battery

  - name: vacuum fan
    unique_id: vacuum_fan
    state: "{{ state_attr('vacuum.ambrogio','fan_speed') }}"
  
  - name: vacuum battery icon
    unique_id: vacuum_battery_icon
    state: "{{ state_attr('vacuum.ambrogio','battery_icon') }}"
    icon: "{{ state_attr('vacuum.ambrogio','battery_icon') }}"
  
  - name: vacuum cleaning time
    unique_id: vacuum_cleaning_time
    state: "{{ state_attr('vacuum.ambrogio','cleaning_time') }}"
    unit_of_measurement: min

  - name: vacuum cleaned area
    unique_id: vacuum_cleaned_area
    state: "{{ state_attr('vacuum.ambrogio','cleaned_area') }}"
    unit_of_measurement: mq
  
  - name: placeholder
    unique_id: placeholder
    state: ' '


################## TEMPLATE -> SENSORI ##############



